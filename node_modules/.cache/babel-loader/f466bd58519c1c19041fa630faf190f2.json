{"ast":null,"code":"import _objectSpread from \"/home/sanji/lighthouse/portfolio/kansd1401.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/sanji/lighthouse/portfolio/kansd1401.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sanji/lighthouse/portfolio/kansd1401.github.io/src/components/Contact/contactContainer.js\";\nimport React, { Fragment, useState } from 'react';\nimport { Grid, Container } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Info from './Info';\nimport ContactCard from './contactCard';\nimport { NavHashLink as NavLink } from 'react-router-hash-link';\nconst styleHook = makeStyles(theme => ({\n  container: {\n    minHeight: \"100vh\",\n    padding: \"50px\"\n  }\n}));\nconst INITIAL_STATE = {\n  name: \"\",\n  email: \"\",\n  subject: \"\",\n  message: \"\",\n  copyEmailStatus: false\n};\n\nfunction ContactContainer(props) {\n  const useStyle = styleHook();\n\n  const _useState = useState(INITIAL_STATE),\n        _useState2 = _slicedToArray(_useState, 2),\n        emailInfo = _useState2[0],\n        setEmailInfo = _useState2[1];\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    alert(`An email has been sent to `);\n    console.log(emailInfo);\n    const payload = Object.assign({}, emailInfo);\n\n    (async () => {\n      const rawResponse = await fetch('https://us-central1-microservices-264117.cloudfunctions.net/sendMessage', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      console.log(rawResponse); //! important\n    })(); //Execute immidiately\n\n\n    setEmailInfo(INITIAL_STATE);\n  }; // # handeling state changes\n  // ! for document purposes. We can choose to create individual functions to handle changes\n  // const handleEmailChange = (val)=>{\n  //   setEmailInfo((previousState) => ({ ...previousState, email: val }));\n  // }\n\n\n  const handleChange = e => {\n    //? This 'if' only exists because i was too dumb to figure out best way to support the checkbox =/\n    const temp = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n\n    if (e.target.type === \"checkbox\") {\n      console.log(\"event is a checkbox\");\n      setEmailInfo(previousState => _objectSpread({}, previousState, {\n        copyEmailStatus: temp\n      }));\n    } else {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      setEmailInfo(previousState => _objectSpread({}, previousState, {\n        [name]: value\n      }));\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Container, {\n    id: \"contactContainer\",\n    maxWidth: false,\n    className: useStyle.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Info, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })))));\n}\n\nexport default ContactContainer;","map":{"version":3,"sources":["/home/sanji/lighthouse/portfolio/kansd1401.github.io/src/components/Contact/contactContainer.js"],"names":["React","Fragment","useState","Grid","Container","makeStyles","Info","ContactCard","NavHashLink","NavLink","styleHook","theme","container","minHeight","padding","INITIAL_STATE","name","email","subject","message","copyEmailStatus","ContactContainer","props","useStyle","emailInfo","setEmailInfo","handleSubmit","evt","preventDefault","alert","console","log","payload","Object","assign","rawResponse","fetch","method","headers","body","JSON","stringify","handleChange","e","temp","target","type","checked","value","previousState"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { Grid,  Container } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Info from './Info';\nimport ContactCard from './contactCard';\nimport { NavHashLink as NavLink } from 'react-router-hash-link';\n\n\n\nconst styleHook = makeStyles(theme => ({\n  container: {\n    minHeight: \"100vh\",\n    padding: \"50px\"\n  },\n}));\n\n\nconst INITIAL_STATE = {\n  name: \"\",\n  email: \"\",\n  subject: \"\",\n  message: \"\",\n  copyEmailStatus: false\n}\n\nfunction ContactContainer(props) {\n  const useStyle = styleHook();\n\n  const [emailInfo, setEmailInfo] = useState(INITIAL_STATE);\n\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    alert(`An email has been sent to `);\n\n    console.log(emailInfo);\n\n    const payload = Object.assign({}, emailInfo);\n\n    (async () => {\n      const rawResponse = await fetch('https://us-central1-microservices-264117.cloudfunctions.net/sendMessage', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      console.log(rawResponse);//! important\n\n    })(); //Execute immidiately\n\n    setEmailInfo(INITIAL_STATE);\n  }\n\n\n  // # handeling state changes\n  // ! for document purposes. We can choose to create individual functions to handle changes\n  // const handleEmailChange = (val)=>{\n  //   setEmailInfo((previousState) => ({ ...previousState, email: val }));\n  // }\n\n\n  const handleChange = e => {\n\n    //? This 'if' only exists because i was too dumb to figure out best way to support the checkbox =/\n    const temp = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n    if (e.target.type === \"checkbox\") {\n      console.log(\"event is a checkbox\")\n      setEmailInfo((previousState) => ({ ...previousState, copyEmailStatus: temp }));\n    }\n    else {\n      const { name, value } = e.target;\n      setEmailInfo((previousState) => ({ ...previousState, [name]: value }));\n\n    }\n\n  }\n\n\n  return (\n    <Fragment>\n      <Container id=\"contactContainer\" maxWidth={false} className={useStyle.container}>\n        <Grid container justify=\"center\" spacing={5} >\n          <Grid item md={6}>\n            <Info />\n          </Grid>\n        </Grid>\n      </Container>\n    </Fragment>\n  )\n}\n\nexport default ContactContainer;"]},"metadata":{},"sourceType":"module"}